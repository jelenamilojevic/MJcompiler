
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 06 11:51:12 CEST 2024
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Thu Jun 06 11:51:12 CEST 2024
  */
public class MJCompiler extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJCompiler() {super();}

  /** Constructor which sets the default scanner. */
  public MJCompiler(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\035\010\000\002\002\004\000\002\036" +
    "\003\000\002\031\004\000\002\031\002\000\002\032\006" +
    "\000\002\032\005\000\002\032\004\000\002\017\005\000" +
    "\002\017\003\000\002\045\005\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\023\004\000\002\023" +
    "\003\000\002\022\004\000\002\022\004\000\002\046\004" +
    "\000\002\005\004\000\002\005\002\000\002\052\003\000" +
    "\002\003\004\000\002\003\002\000\002\037\012\000\002" +
    "\004\004\000\002\004\002\000\002\033\005\000\002\034" +
    "\004\000\002\034\003\000\002\047\005\000\002\050\004" +
    "\000\002\040\004\000\002\040\004\000\002\006\003\000" +
    "\002\006\002\000\002\007\005\000\002\007\003\000\002" +
    "\051\005\000\002\010\004\000\002\010\002\000\002\011" +
    "\004\000\002\011\002\000\002\012\003\000\002\012\003" +
    "\000\002\027\007\000\002\027\011\000\002\026\004\000" +
    "\002\026\004\000\002\026\007\000\002\026\007\000\002" +
    "\026\013\000\002\026\004\000\002\026\004\000\002\026" +
    "\005\000\002\026\004\000\002\026\005\000\002\026\007" +
    "\000\002\026\013\000\002\026\011\000\002\026\017\000" +
    "\002\013\005\000\002\013\003\000\002\043\003\000\002" +
    "\044\003\000\002\056\005\000\002\056\004\000\002\056" +
    "\004\000\002\056\006\000\002\021\003\000\002\021\002" +
    "\000\002\061\005\000\002\061\003\000\002\053\005\000" +
    "\002\053\004\000\002\053\003\000\002\054\005\000\002" +
    "\054\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\005\000\002\055\003\000\002\055\007\000\002\055\003" +
    "\000\002\055\006\000\002\041\004\000\002\041\003\000" +
    "\002\042\005\000\002\024\005\000\002\024\003\000\002" +
    "\025\005\000\002\025\003\000\002\060\005\000\002\060" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\004\005\001\002\000\004\002\324\001" +
    "\002\000\004\055\006\001\002\000\012\003\uffff\005\uffff" +
    "\031\uffff\055\uffff\001\002\000\012\003\ufffd\005\ufffd\031" +
    "\ufffd\055\ufffd\001\002\000\012\003\014\005\012\031\011" +
    "\055\016\001\002\000\004\055\016\001\002\000\010\006" +
    "\uffea\017\uffea\055\uffea\001\002\000\006\003\020\055\024" +
    "\001\002\000\004\007\017\001\002\000\012\003\ufffe\005" +
    "\ufffe\031\ufffe\055\ufffe\001\002\000\010\003\uffec\025\uffec" +
    "\055\uffec\001\002\000\012\003\ufffa\005\ufffa\031\ufffa\055" +
    "\ufffa\001\002\000\004\012\033\001\002\000\006\007\ufff2" +
    "\012\032\001\002\000\006\003\020\055\024\001\002\000" +
    "\004\007\030\001\002\000\010\007\uffed\012\uffed\025\025" +
    "\001\002\000\004\026\027\001\002\000\006\007\uffef\012" +
    "\uffef\001\002\000\006\007\uffee\012\uffee\001\002\000\012" +
    "\003\ufffb\005\ufffb\031\ufffb\055\ufffb\001\002\000\004\007" +
    "\ufff3\001\002\000\006\003\ufff1\055\ufff1\001\002\000\006" +
    "\003\ufff0\055\ufff0\001\002\000\010\006\036\017\041\055" +
    "\016\001\002\000\004\055\307\001\002\000\004\002\001" +
    "\001\002\000\010\006\uffeb\017\uffeb\055\uffeb\001\002\000" +
    "\004\010\043\001\002\000\004\055\042\001\002\000\004" +
    "\010\uffe0\001\002\000\006\011\uffde\055\016\001\002\000" +
    "\006\011\uffdf\012\305\001\002\000\004\055\301\001\002" +
    "\000\004\011\050\001\002\000\006\011\uffdc\012\uffdc\001" +
    "\002\000\006\005\uffe7\055\uffe7\001\002\000\006\005\052" +
    "\055\016\001\002\000\030\003\uffd7\005\uffd7\006\uffd7\014" +
    "\uffd7\015\uffd7\020\uffd7\032\uffd7\034\uffd7\035\uffd7\055\uffd7" +
    "\057\uffd7\001\002\000\004\055\057\001\002\000\006\005" +
    "\uffe8\055\uffe8\001\002\000\004\055\057\001\002\000\004" +
    "\007\063\001\002\000\010\007\uffed\012\uffed\025\025\001" +
    "\002\000\004\007\uffe4\001\002\000\006\007\uffe2\012\062" +
    "\001\002\000\004\055\uffe3\001\002\000\006\005\uffe6\055" +
    "\uffe6\001\002\000\004\007\uffe5\001\002\000\030\003\077" +
    "\005\067\006\104\014\100\015\103\020\066\032\070\034" +
    "\105\035\102\055\071\057\074\001\002\000\004\010\275" +
    "\001\002\000\030\003\uffd7\005\uffd7\006\uffd7\014\uffd7\015" +
    "\uffd7\020\uffd7\032\uffd7\034\uffd7\035\uffd7\055\uffd7\057\uffd7" +
    "\001\002\000\004\010\267\001\002\000\060\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\016\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\263\026\uffab\027\uffab\030\uffab\037" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\001\002\000\030\003\uffd5\005\uffd5\006" +
    "\uffd5\014\uffd5\015\uffd5\020\uffd5\032\uffd5\034\uffd5\035\uffd5" +
    "\055\uffd5\057\uffd5\001\002\000\014\010\217\013\215\027" +
    "\214\030\216\037\220\001\002\000\004\010\164\001\002" +
    "\000\004\007\163\001\002\000\030\003\uffd8\005\uffd8\006" +
    "\uffd8\014\uffd8\015\uffd8\020\uffd8\032\uffd8\034\uffd8\035\uffd8" +
    "\055\uffd8\057\uffd8\001\002\000\004\007\162\001\002\000" +
    "\004\010\153\001\002\000\030\003\uffd6\005\uffd6\006\uffd6" +
    "\014\uffd6\015\uffd6\020\uffd6\032\uffd6\034\uffd6\035\uffd6\055" +
    "\uffd6\057\uffd6\001\002\000\004\007\152\001\002\000\022" +
    "\007\115\010\120\021\107\036\112\053\110\054\114\055" +
    "\071\056\121\001\002\000\010\006\uffe9\017\uffe9\055\uffe9" +
    "\001\002\000\004\007\106\001\002\000\034\003\uffcd\005" +
    "\uffcd\006\uffcd\011\uffcd\014\uffcd\015\uffcd\020\uffcd\032\uffcd" +
    "\034\uffcd\035\uffcd\055\uffcd\057\uffcd\060\uffcd\001\002\000" +
    "\016\010\120\036\112\053\110\054\114\055\071\056\121" +
    "\001\002\000\044\007\uffb0\011\uffb0\012\uffb0\016\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\001" +
    "\002\000\010\007\150\016\124\021\125\001\002\000\004" +
    "\055\016\001\002\000\046\007\uffae\010\135\011\uffae\012" +
    "\uffae\016\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\001\002\000\044\007\uffb3\011\uffb3\012\uffb3" +
    "\016\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\001\002\000\034\003\uffca\005\uffca\006\uffca\011" +
    "\uffca\014\uffca\015\uffca\020\uffca\032\uffca\034\uffca\035\uffca" +
    "\055\uffca\057\uffca\060\uffca\001\002\000\044\007\uffb6\011" +
    "\uffb6\012\uffb6\016\uffb6\021\uffb6\022\130\023\131\024\132" +
    "\026\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\001\002\000\044\007\uffb4\011\uffb4" +
    "\012\uffb4\016\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\001\002\000\020\010\120\021\107\036" +
    "\112\053\110\054\114\055\071\056\121\001\002\000\044" +
    "\007\uffb2\011\uffb2\012\uffb2\016\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\026\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\001\002\000\010\011" +
    "\123\016\124\021\125\001\002\000\044\007\uffb1\011\uffb1" +
    "\012\uffb1\016\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\001\002\000\016\010\uffa3\036\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\001\002\000\016\010\uffa2" +
    "\036\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002\000" +
    "\016\010\120\036\112\053\110\054\114\055\071\056\121" +
    "\001\002\000\044\007\uffb8\011\uffb8\012\uffb8\016\uffb8\021" +
    "\uffb8\022\130\023\131\024\132\026\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\001" +
    "\002\000\016\010\uffa1\036\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\001\002\000\016\010\uffa0\036\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\001\002\000\016\010\uff9f\036\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\001\002\000\016\010" +
    "\120\036\112\053\110\054\114\055\071\056\121\001\002" +
    "\000\044\007\uffb5\011\uffb5\012\uffb5\016\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\026\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\001\002\000" +
    "\022\010\120\011\uffbb\021\107\036\112\053\110\054\114" +
    "\055\071\056\121\001\002\000\004\011\143\001\002\000" +
    "\012\011\uffb9\012\uffb9\016\124\021\125\001\002\000\006" +
    "\011\uffbc\012\141\001\002\000\020\010\120\021\107\036" +
    "\112\053\110\054\114\055\071\056\121\001\002\000\012" +
    "\011\uffba\012\uffba\016\124\021\125\001\002\000\044\007" +
    "\uffad\011\uffad\012\uffad\016\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\026\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\001\002\000\004\025\145" +
    "\001\002\000\020\010\120\021\107\036\112\053\110\054" +
    "\114\055\071\056\121\001\002\000\010\016\124\021\125" +
    "\026\147\001\002\000\044\007\uffaf\011\uffaf\012\uffaf\016" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\001\002\000\034\003\uffcb\005\uffcb\006\uffcb\011\uffcb" +
    "\014\uffcb\015\uffcb\020\uffcb\032\uffcb\034\uffcb\035\uffcb\055" +
    "\uffcb\057\uffcb\060\uffcb\001\002\000\044\007\uffb7\011\uffb7" +
    "\012\uffb7\016\uffb7\021\uffb7\022\130\023\131\024\132\026" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\001\002\000\034\003\uffcc\005\uffcc\006" +
    "\uffcc\011\uffcc\014\uffcc\015\uffcc\020\uffcc\032\uffcc\034\uffcc" +
    "\035\uffcc\055\uffcc\057\uffcc\060\uffcc\001\002\000\020\010" +
    "\120\021\107\036\112\053\110\054\114\055\071\056\121" +
    "\001\002\000\004\011\160\001\002\000\012\011\uffc3\012" +
    "\156\016\124\021\125\001\002\000\004\054\157\001\002" +
    "\000\004\011\uffc4\001\002\000\004\007\161\001\002\000" +
    "\034\003\uffcf\005\uffcf\006\uffcf\011\uffcf\014\uffcf\015\uffcf" +
    "\020\uffcf\032\uffcf\034\uffcf\035\uffcf\055\uffcf\057\uffcf\060" +
    "\uffcf\001\002\000\034\003\uffd1\005\uffd1\006\uffd1\011\uffd1" +
    "\014\uffd1\015\uffd1\020\uffd1\032\uffd1\034\uffd1\035\uffd1\055" +
    "\uffd1\057\uffd1\060\uffd1\001\002\000\034\003\uffd2\005\uffd2" +
    "\006\uffd2\011\uffd2\014\uffd2\015\uffd2\020\uffd2\032\uffd2\034" +
    "\uffd2\035\uffd2\055\uffd2\057\uffd2\060\uffd2\001\002\000\020" +
    "\010\120\021\107\036\112\053\110\054\114\055\071\056" +
    "\121\001\002\000\030\011\uffa4\016\124\021\125\041\uffa4" +
    "\042\uffa4\043\210\044\211\045\204\046\203\047\207\050" +
    "\205\001\002\000\006\011\173\041\174\001\002\000\010" +
    "\011\uffa6\041\uffa6\042\uffa6\001\002\000\010\011\uffa8\041" +
    "\uffa8\042\171\001\002\000\020\010\120\021\107\036\112" +
    "\053\110\054\114\055\071\056\121\001\002\000\010\011" +
    "\uffa7\041\uffa7\042\uffa7\001\002\000\026\003\077\005\067" +
    "\014\100\015\103\020\066\032\070\034\105\035\102\055" +
    "\071\057\074\001\002\000\020\010\120\021\107\036\112" +
    "\053\110\054\114\055\071\056\121\001\002\000\010\011" +
    "\uffa9\041\uffa9\042\171\001\002\000\030\003\uffd4\005\uffd4" +
    "\006\uffd4\014\uffd4\015\uffd4\020\uffd4\032\uffd4\034\uffd4\035" +
    "\uffd4\055\uffd4\057\uffd4\001\002\000\032\003\uffd6\005\uffd6" +
    "\006\uffd6\014\uffd6\015\uffd6\020\uffd6\032\uffd6\034\uffd6\035" +
    "\uffd6\055\uffd6\057\uffd6\060\200\001\002\000\026\003\077" +
    "\005\067\014\100\015\103\020\066\032\070\034\105\035" +
    "\102\055\071\057\074\001\002\000\030\003\uffd3\005\uffd3" +
    "\006\uffd3\014\uffd3\015\uffd3\020\uffd3\032\uffd3\034\uffd3\035" +
    "\uffd3\055\uffd3\057\uffd3\001\002\000\034\003\uffc6\005\uffc6" +
    "\006\uffc6\011\uffc6\014\uffc6\015\uffc6\020\uffc6\032\uffc6\034" +
    "\uffc6\035\uffc6\055\uffc6\057\uffc6\060\uffc6\001\002\000\020" +
    "\010\uff9b\021\uff9b\036\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\001\002\000\020\010\uff9c\021\uff9c\036\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\001\002\000\020\010\uff99\021" +
    "\uff99\036\uff99\053\uff99\054\uff99\055\uff99\056\uff99\001\002" +
    "\000\020\010\120\021\107\036\112\053\110\054\114\055" +
    "\071\056\121\001\002\000\020\010\uff9a\021\uff9a\036\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\001\002\000\020\010" +
    "\uff9e\021\uff9e\036\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\001\002\000\020\010\uff9d\021\uff9d\036\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\001\002\000\014\011\uffa5\016\124" +
    "\021\125\041\uffa5\042\uffa5\001\002\000\020\010\120\021" +
    "\107\036\112\053\110\054\114\055\071\056\121\001\002" +
    "\000\004\007\uffbf\001\002\000\020\010\uff98\021\uff98\036" +
    "\uff98\053\uff98\054\uff98\055\uff98\056\uff98\001\002\000\004" +
    "\007\uffbe\001\002\000\022\010\120\011\uffbb\021\107\036" +
    "\112\053\110\054\114\055\071\056\121\001\002\000\004" +
    "\033\221\001\002\000\004\010\222\001\002\000\004\055" +
    "\223\001\002\000\004\051\uffc2\001\002\000\004\051\225" +
    "\001\002\000\026\003\077\005\067\014\100\015\103\020" +
    "\066\032\070\034\105\035\102\055\071\057\226\001\002" +
    "\000\004\010\232\001\002\000\004\011\230\001\002\000" +
    "\004\007\231\001\002\000\034\003\uffc7\005\uffc7\006\uffc7" +
    "\011\uffc7\014\uffc7\015\uffc7\020\uffc7\032\uffc7\034\uffc7\035" +
    "\uffc7\055\uffc7\057\uffc7\060\uffc7\001\002\000\020\010\120" +
    "\021\107\036\112\053\110\054\114\055\071\056\121\001" +
    "\002\000\006\011\234\041\174\001\002\000\026\003\077" +
    "\005\067\014\100\015\103\020\066\032\070\034\105\035" +
    "\102\055\071\057\226\001\002\000\004\060\236\001\002" +
    "\000\026\003\077\005\067\014\100\015\103\020\066\032" +
    "\070\034\105\035\102\055\071\057\226\001\002\000\004" +
    "\011\240\001\002\000\004\007\uffbd\001\002\000\010\007" +
    "\uffc0\016\124\021\125\001\002\000\022\007\uffae\010\135" +
    "\016\uffae\021\uffae\022\uffae\023\uffae\024\uffae\037\243\001" +
    "\002\000\006\040\245\052\244\001\002\000\004\010\252" +
    "\001\002\000\004\010\246\001\002\000\020\010\120\021" +
    "\107\036\112\053\110\054\114\055\071\056\121\001\002" +
    "\000\010\011\250\016\124\021\125\001\002\000\004\007" +
    "\251\001\002\000\034\003\uffce\005\uffce\006\uffce\011\uffce" +
    "\014\uffce\015\uffce\020\uffce\032\uffce\034\uffce\035\uffce\055" +
    "\uffce\057\uffce\060\uffce\001\002\000\020\010\120\021\107" +
    "\036\112\053\110\054\114\055\071\056\121\001\002\000" +
    "\010\012\254\016\124\021\125\001\002\000\004\055\255" +
    "\001\002\000\004\051\uffc1\001\002\000\004\051\257\001" +
    "\002\000\020\010\120\021\107\036\112\053\110\054\114" +
    "\055\071\056\121\001\002\000\010\011\261\016\124\021" +
    "\125\001\002\000\004\007\262\001\002\000\034\003\uffc5" +
    "\005\uffc5\006\uffc5\011\uffc5\014\uffc5\015\uffc5\020\uffc5\032" +
    "\uffc5\034\uffc5\035\uffc5\055\uffc5\057\uffc5\060\uffc5\001\002" +
    "\000\020\010\120\021\107\036\112\053\110\054\114\055" +
    "\071\056\121\001\002\000\056\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\016\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\026\uffac\027\uffac\030\uffac\037\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\001" +
    "\002\000\010\016\124\021\125\026\266\001\002\000\056" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\016\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\037\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\001\002\000\020\010\120\021\107" +
    "\036\112\053\110\054\114\055\071\056\121\001\002\000" +
    "\006\011\271\041\174\001\002\000\026\003\077\005\067" +
    "\014\100\015\103\020\066\032\070\034\105\035\102\055" +
    "\071\057\226\001\002\000\034\003\uffc8\005\uffc8\006\uffc8" +
    "\011\uffc8\014\uffc8\015\uffc8\020\uffc8\032\uffc8\034\uffc8\035" +
    "\uffc8\055\uffc8\057\uffc8\060\uffc8\001\002\000\030\003\077" +
    "\005\067\006\274\014\100\015\103\020\066\032\070\034" +
    "\105\035\102\055\071\057\074\001\002\000\034\003\uffc9" +
    "\005\uffc9\006\uffc9\011\uffc9\014\uffc9\015\uffc9\020\uffc9\032" +
    "\uffc9\034\uffc9\035\uffc9\055\uffc9\057\uffc9\060\uffc9\001\002" +
    "\000\004\055\071\001\002\000\004\011\277\001\002\000" +
    "\004\007\300\001\002\000\034\003\uffd0\005\uffd0\006\uffd0" +
    "\011\uffd0\014\uffd0\015\uffd0\020\uffd0\032\uffd0\034\uffd0\035" +
    "\uffd0\055\uffd0\057\uffd0\060\uffd0\001\002\000\010\011\uffd9" +
    "\012\uffd9\025\302\001\002\000\004\026\304\001\002\000" +
    "\006\011\uffdb\012\uffdb\001\002\000\006\011\uffda\012\uffda" +
    "\001\002\000\004\055\016\001\002\000\006\011\uffdd\012" +
    "\uffdd\001\002\000\004\010\uffe1\001\002\000\004\055\313" +
    "\001\002\000\006\007\322\012\321\001\002\000\006\007" +
    "\ufff8\012\ufff8\001\002\000\004\013\215\001\002\000\010" +
    "\053\316\054\315\056\320\001\002\000\006\007\ufff6\012" +
    "\ufff6\001\002\000\006\007\ufff4\012\ufff4\001\002\000\006" +
    "\007\ufff7\012\ufff7\001\002\000\006\007\ufff5\012\ufff5\001" +
    "\002\000\004\055\313\001\002\000\012\003\ufffc\005\ufffc" +
    "\031\ufffc\055\ufffc\001\002\000\006\007\ufff9\012\ufff9\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\035\003\001\001\000\002\001\001\000" +
    "\004\036\006\001\001\000\002\001\001\000\004\031\007" +
    "\001\001\000\006\032\014\052\012\001\001\000\004\052" +
    "\307\001\001\000\004\003\033\001\001\000\010\022\021" +
    "\023\022\046\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\021\023\030\046\020\001" +
    "\001\000\002\001\001\000\004\005\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\036\040\037\052\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\045\007" +
    "\043\051\046\052\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\050\001\001\000\006\033\053\052\052\001\001\000\004" +
    "\011\064\001\001\000\010\034\055\047\054\050\057\001" +
    "\001\000\002\001\001\000\010\034\063\047\054\050\057" +
    "\001\001\000\002\001\001\000\004\005\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\075\026\100\027" +
    "\071\041\072\056\074\001\001\000\002\001\001\000\004" +
    "\011\272\001\001\000\002\001\001\000\004\042\263\001" +
    "\001\000\002\001\001\000\004\030\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\041\112\053\110\054\115\055\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\041\112\054\150\055\116\001\001\000\002\001\001\000" +
    "\004\014\125\001\001\000\004\052\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\132\001\001\000\002\001\001\000\012\041\112\053\121" +
    "\054\115\055\116\001\001\000\002\001\001\000\004\014" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\041\112\054\126\055\116\001\001\000" +
    "\004\015\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\112\055\133\001\001\000" +
    "\002\001\001\000\016\021\135\041\112\053\136\054\115" +
    "\055\116\061\137\001\001\000\002\001\001\000\004\014" +
    "\125\001\001\000\002\001\001\000\012\041\112\053\141" +
    "\054\115\055\116\001\001\000\004\014\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\041\112\053\145" +
    "\054\115\055\116\001\001\000\004\014\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\132\001\001" +
    "\000\002\001\001\000\014\013\153\041\112\053\154\054" +
    "\115\055\116\001\001\000\002\001\001\000\004\014\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\024\165\025\167\041\112\053\164\054\115\055" +
    "\116\060\166\001\001\000\006\014\125\016\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\041\112\053\164\054\115\055\116\060\171\001\001" +
    "\000\002\001\001\000\014\012\175\026\176\027\071\041" +
    "\072\056\074\001\001\000\016\025\174\041\112\053\164" +
    "\054\115\055\116\060\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\201\027\200" +
    "\041\072\056\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\041\112\053\211\054\115\055\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\125\001\001\000\012\041\241\053\240\054\115\055" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\236\041\112\053\136\054\115\055" +
    "\116\061\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\226\041\072\056\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\232\025\167\041\112\053\164\054\115" +
    "\055\116\060\166\001\001\000\002\001\001\000\010\026" +
    "\234\041\072\056\074\001\001\000\002\001\001\000\010" +
    "\026\201\041\072\056\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\112\053\246\054\115\055\116\001\001\000\004" +
    "\014\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\112\053\252\054\115\055\116\001\001\000\004" +
    "\014\125\001\001\000\004\044\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\041\112\053\257\054\115" +
    "\055\116\001\001\000\004\014\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\041\112\053\264\054\115" +
    "\055\116\001\001\000\002\001\001\000\004\014\125\001" +
    "\001\000\002\001\001\000\020\024\267\025\167\041\112" +
    "\053\164\054\115\055\116\060\166\001\001\000\002\001" +
    "\001\000\010\026\271\041\072\056\074\001\001\000\002" +
    "\001\001\000\014\012\075\026\100\027\071\041\072\056" +
    "\074\001\001\000\002\001\001\000\004\041\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\305\052\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\310\045\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\313\001\001\000\004\057\316\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJCompiler$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJCompiler$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJCompiler$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
  errorDetected = false;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {


  Symbol s = this.getScanner().next_token();
  if (s != null && s.value != null) 
    log.info(s.toString() + " " + s.value.toString());
  return s;

    }



boolean errorDetected;

Logger log = Logger.getLogger(getClass());

  //slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
  public void report_fatal_error(String message, Object info) throws java.lang.Exception {
    done_parsing();
    report_error(message, info);
  }
  
  public void syntax_error(Symbol cur_token) {
    report_error("\nSintaksna greska", cur_token);
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
  }
  
  public void report_error(String message, Object info) {
    errorDetected = true;
    StringBuilder msg = new StringBuilder(message);
    if (info instanceof Symbol)
      msg.append(" na liniji ").append(((Symbol)info).left);
      log.error(msg.toString());
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJCompiler$actions {
  private final MJCompiler parser;

  /** Constructor */
  CUP$MJCompiler$actions(MJCompiler parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJCompiler$do_action(
    int                        CUP$MJCompiler$act_num,
    java_cup.runtime.lr_parser CUP$MJCompiler$parser,
    java.util.Stack            CUP$MJCompiler$stack,
    int                        CUP$MJCompiler$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJCompiler$result;

      /* select the action based on the action number */
      switch (CUP$MJCompiler$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Assignop ::= EQUAL 
            {
              Assignop RESULT = null;
		 RESULT=new Assignop(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(22/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Relop ::= LESSEQ 
            {
              Relop RESULT = null;
		 RESULT=new LesserEqualOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new LesserOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Relop ::= GRTEQ 
            {
              Relop RESULT = null;
		 RESULT=new GreaterEqualOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Relop ::= GRT 
            {
              Relop RESULT = null;
		 RESULT=new GreaterOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Relop ::= DIFF 
            {
              Relop RESULT = null;
		 RESULT=new DiffOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Relop ::= CMPEQUAL 
            {
              Relop RESULT = null;
		 RESULT=new CmpEqualOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(12/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Mulop ::= REM 
            {
              Mulop RESULT = null;
		 RESULT=new RemainingOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(11/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new DivideOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(11/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new MultiplyOp(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(11/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new MinusAddop(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(10/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new PlusAddop(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(10/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new CondWithoutRelop(ex); RESULT.setLine(exleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(46/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new CondWithRelop(ex1, R1, ex2); RESULT.setLine(ex1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(46/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondTerm ::= CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(19/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondTerm ::= CondTerm AND CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MultiCondTerm(C1, C2); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(19/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Condition ::= CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleCondition(C1); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(18/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condition ::= Condition OR CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		CondTerm C2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MultiCondition(C1, C2); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(18/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorArray ::= LSQUARE Expr RSQUARE 
            {
              DesignatorArray RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new ArrayIndexDes(ex); RESULT.setLine(exleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(32/*DesignatorArray*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Designator ::= IDENT 
            {
              Designator RESULT = null;
		int desNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int desNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String desName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new VarDesignator(desName); RESULT.setLine(desNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(31/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Designator ::= IDENT DesignatorArray 
            {
              Designator RESULT = null;
		int desNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int desNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		String desName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		DesignatorArray D1 = (DesignatorArray)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new VarArrayDesignator(desName, D1); RESULT.setLine(desNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(31/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Factor RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).right;
		Designator func = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new ProcCallFactor(func, A1); RESULT.setLine(funcleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Designator des = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new Var(des); RESULT.setLine(desleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Factor RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).right;
		Type typeName = (Type)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new ArrayVar(typeName, te); RESULT.setLine(typeNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= BOOL 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String B1 = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new BoolConst(B1); RESULT.setLine(B1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new ParenExpr(te); RESULT.setLine(teleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Factor ::= CHAR 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new CharConst(C1); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Factor ::= NUMBER 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new NumConst(N1); RESULT.setLine(N1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Term ::= Factor 
            {
              Term RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Factor te = (Factor)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SimpleTerm(te); RESULT.setLine(teleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(42/*Term*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Mulop M1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Factor te = (Factor)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MulTerm(t, M1, te); RESULT.setLine(tleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(42/*Term*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Term 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleTermExpr(t); RESULT.setLine(tleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(41/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= MINUS Term 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleTermExprSigned(t); RESULT.setLine(tleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(41/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr Addop Term 
            {
              Expr RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Addop A1 = (Addop)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new AddopTermExpr(te, A1, t); RESULT.setLine(teleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(41/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ActualParamList ::= Expr 
            {
              ActualParamList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleParamExpr(E1); RESULT.setLine(E1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(47/*ActualParamList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              ActualParamList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		ActualParamList A1 = (ActualParamList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MultiParamExpr(A1, E2); RESULT.setLine(A1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(47/*ActualParamList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ActPars ::= 
            {
              ActPars RESULT = null;
		 RESULT=new NoActualParams(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(15/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ActPars ::= ActualParamList 
            {
              ActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		ActualParamList A1 = (ActualParamList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new ActualParams(A1); RESULT.setLine(A1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(15/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorStatement ::= Designator LPAREN ActPars RPAREN 
            {
              DesignatorStatement RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).right;
		Designator func = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(44/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DesignatorStatement ::= Designator DEC 
            {
              DesignatorStatement RESULT = null;
		int incleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Designator inc = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new DecrementDes(inc); RESULT.setLine(incleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(44/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DesignatorStatement ::= Designator INC 
            {
              DesignatorStatement RESULT = null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Designator dec = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new IncrementDes(dec); RESULT.setLine(decleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(44/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DesignatorStatement ::= Designator Assignop Expr 
            {
              DesignatorStatement RESULT = null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Designator assign = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Assignop A1 = (Assignop)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new AssignDesignator(assign, A1, te); RESULT.setLine(assignleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(44/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FindReplaceIdent ::= IDENT 
            {
              FindReplaceIdent RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new FindReplaceIdent(name); RESULT.setLine(nameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(34/*FindReplaceIdent*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ForEachIdent ::= IDENT 
            {
              ForEachIdent RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new ForEachIdent(name); RESULT.setLine(nameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(33/*ForEachIdent*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PrintOption ::= Expr 
            {
              PrintOption RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new PlainExpr(te); RESULT.setLine(teleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(9/*PrintOption*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PrintOption ::= Expr COMMA NUMBER 
            {
              PrintOption RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new ExprWithNum(te, N1); RESULT.setLine(teleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(9/*PrintOption*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= Designator Assignop Designator DOT FINDREPLACE LPAREN Expr COMMA FindReplaceIdent FORARROW Expr RPAREN SEMI 
            {
              Matched RESULT = null;
		int findReplleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-12)).left;
		int findReplright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-12)).right;
		Designator findRepl = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-12)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-11)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-11)).right;
		Assignop A1 = (Assignop)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-11)).value;
		int fRleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-10)).left;
		int fRright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-10)).right;
		Designator fR = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-10)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-6)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-6)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-6)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).right;
		FindReplaceIdent F2 = (FindReplaceIdent)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		 RESULT=new FindReplaceStatement(findRepl, A1, fR, te, F2, ex); RESULT.setLine(findReplleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-12)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Matched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Matched M3 = (Matched)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MatchedStatement(C1, M2, M3); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matched ::= Designator DOT FOREACH LPAREN ForEachIdent FORARROW Matched RPAREN SEMI 
            {
              Matched RESULT = null;
		int forEachleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-8)).left;
		int forEachright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-8)).right;
		Designator forEach = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-8)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).right;
		ForEachIdent F1 = (ForEachIdent)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		 RESULT=new ForeachStatement(forEach, F1, M2); RESULT.setLine(forEachleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Matched ::= WHILE LPAREN Condition RPAREN Matched 
            {
              Matched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new WhileStatement(C1, M2); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Matched ::= LBRACE StatementList RBRACE 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new BlockStatement(S1); RESULT.setLine(S1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Matched ::= RETURN SEMI 
            {
              Matched RESULT = null;
		 RESULT=new PlainReturnStatement(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matched ::= RETURN Expr SEMI 
            {
              Matched RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new ReturnWithExprStatement(te); RESULT.setLine(teleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Matched ::= CONTINUE SEMI 
            {
              Matched RESULT = null;
		 RESULT=new ContinueStatement(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matched ::= BREAK SEMI 
            {
              Matched RESULT = null;
		 RESULT=new BreakStatement(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matched ::= Designator Assignop Designator DOT FINDANY LPAREN Expr RPAREN SEMI 
            {
              Matched RESULT = null;
		int findAnyleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-8)).left;
		int findAnyright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-8)).right;
		Designator findAny = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-8)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-7)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-7)).right;
		Assignop A1 = (Assignop)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-7)).value;
		int fAleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-6)).left;
		int fAright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-6)).right;
		Designator fA = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-6)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Expr te = (Expr)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		 RESULT=new FindAnyStatement(findAny, A1, fA, te); RESULT.setLine(findAnyleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matched ::= PRINT LPAREN PrintOption RPAREN SEMI 
            {
              Matched RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		PrintOption P1 = (PrintOption)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		 RESULT=new PrintStatement(P1); RESULT.setLine(P1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Matched RESULT = null;
		int readDesleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int readDesright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Designator readDes = (Designator)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		 RESULT=new ReadStatement(readDes); RESULT.setLine(readDesleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matched ::= error SEMI 
            {
              Matched RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 parser.report_error("Neispravna dodela vrednosti, izvrsen oporavak do ; u liniji "+lleft, null);  RESULT=new ErrorStmt(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matched ::= DesignatorStatement SEMI 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new AssignStatement(D1); RESULT.setLine(D1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(20/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Unmatched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int U3left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int U3right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Unmatched U3 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(21/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Unmatched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(21/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= Unmatched 
            {
              Statement RESULT = null;
		int U1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int U1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Unmatched U1 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= Matched 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new NoStatement(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MultiStatement(S1, S2); RESULT.setLine(S1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormParamArray ::= 
            {
              FormParamArray RESULT = null;
		 RESULT=new FormParamNoArray(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(6/*FormParamArray*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormParamArray ::= LSQUARE RSQUARE 
            {
              FormParamArray RESULT = null;
		 RESULT=new FormParamWithArray(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(6/*FormParamArray*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormalParamDecl ::= Type IDENT FormParamArray 
            {
              FormalParamDecl RESULT = null;
		int paramTypeleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int paramTyperight = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Type paramType = (Type)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		FormParamArray F1 = (FormParamArray)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new FormalParamDecl(paramType, paramName, F1); RESULT.setLine(paramTypeleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(39/*FormalParamDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormParamList ::= FormalParamDecl 
            {
              FormParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		FormalParamDecl F1 = (FormalParamDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleFormalParam(F1); RESULT.setLine(F1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(5/*FormParamList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormParamList ::= FormParamList COMMA FormalParamDecl 
            {
              FormParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		FormParamList F1 = (FormParamList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		FormalParamDecl F2 = (FormalParamDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(5/*FormParamList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormPars ::= 
            {
              FormPars RESULT = null;
		 RESULT=new NoFormParams(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(4/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormPars ::= FormParamList 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		FormParamList F1 = (FormParamList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new FormParams(F1); RESULT.setLine(F1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(4/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodTypeName ::= VOID IDENT 
            {
              MethodTypeName RESULT = null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MethodVoidType(methName); RESULT.setLine(methNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(30/*MethodTypeName*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodTypeName ::= Type IDENT 
            {
              MethodTypeName RESULT = null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Type retType = (Type)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MethodWithType(retType, methName); RESULT.setLine(retTypeleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(30/*MethodTypeName*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SingleMethIdent ::= IDENT ArrayDecl 
            {
              SingleMethIdent RESULT = null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		ArrayDecl A1 = (ArrayDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleMethIdent(vName, A1); RESULT.setLine(vNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(38/*SingleMethIdent*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MultiMethIdent ::= IDENT ArrayDecl COMMA 
            {
              MultiMethIdent RESULT = null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		ArrayDecl A1 = (ArrayDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new MultiMethIdent(vName, A1); RESULT.setLine(vNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(37/*MultiMethIdent*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethIdentArray ::= SingleMethIdent 
            {
              MethIdentArray RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		SingleMethIdent S1 = (SingleMethIdent)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new OneMethIdent(S1); RESULT.setLine(S1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(26/*MethIdentArray*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethIdentArray ::= MultiMethIdent MethIdentArray 
            {
              MethIdentArray RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		MultiMethIdent M1 = (MultiMethIdent)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		MethIdentArray M2 = (MethIdentArray)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MultiMethIdentList(M1, M2); RESULT.setLine(M1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(26/*MethIdentArray*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodVarDecl ::= Type MethIdentArray SEMI 
            {
              MethodVarDecl RESULT = null;
		int methVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int methVarTyperight = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Type methVarType = (Type)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		MethIdentArray M1 = (MethIdentArray)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new MethodVarDecl(methVarType, M1); RESULT.setLine(methVarTypeleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(25/*MethodVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodVarDeclList ::= 
            {
              MethodVarDeclList RESULT = null;
		 RESULT=new NoMethodVars(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(2/*MethodVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodVarDeclList ::= MethodVarDeclList MethodVarDecl 
            {
              MethodVarDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		MethodVarDeclList M1 = (MethodVarDeclList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		MethodVarDecl M2 = (MethodVarDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new WithMethodVars(M1, M2); RESULT.setLine(M1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(2/*MethodVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDecl ::= MethodTypeName LPAREN FormPars RPAREN MethodVarDeclList LBRACE StatementList RBRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-7)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-7)).right;
		MethodTypeName M1 = (MethodTypeName)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-7)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-5)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-5)).right;
		FormPars F2 = (FormPars)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-5)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).right;
		MethodVarDeclList M3 = (MethodVarDeclList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new MethodDecl(M1, F2, M3, S4); RESULT.setLine(M1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(29/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new NoMethodDecl(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(1/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MethodDecarations(M1, M2); RESULT.setLine(M1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(1/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(40/*Type*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ArrayDecl ::= 
            {
              ArrayDecl RESULT = null;
		 RESULT=new WithNoArray(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(3/*ArrayDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ArrayDecl ::= LSQUARE RSQUARE 
            {
              ArrayDecl RESULT = null;
		 RESULT=new WithArrayDecl(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(3/*ArrayDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SingleVarDecl ::= IDENT ArrayDecl 
            {
              SingleVarDecl RESULT = null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		String vName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		ArrayDecl A1 = (ArrayDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleVarDecl(vName, A1); RESULT.setLine(vNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(36/*SingleVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MultiIdent ::= error COMMA 
            {
              MultiIdent RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 parser.report_error("Neispravna deklaracija globalne promenljive, izvrsen oporavak do , u liniji "+lleft, null);  RESULT=new VarErrorStmt(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(16/*MultiIdent*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MultiIdent ::= SingleVarDecl COMMA 
            {
              MultiIdent RESULT = null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		SingleVarDecl vName = (SingleVarDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new MultiIdentDecl(vName); RESULT.setLine(vNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(16/*MultiIdent*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= SingleVarDecl 
            {
              VarDecl RESULT = null;
		int vNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int vNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		SingleVarDecl vName = (SingleVarDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new OneIdent(vName); RESULT.setLine(vNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(17/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= MultiIdent VarDecl 
            {
              VarDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		MultiIdent M1 = (MultiIdent)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MultiIdentList(M1, V2); RESULT.setLine(M1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(17/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstFactor ::= BOOL 
            {
              ConstFactor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String B1 = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new BooleanConst(B1); RESULT.setLine(B1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(45/*ConstFactor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstFactor ::= CHAR 
            {
              ConstFactor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new CharacterConst(C1); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(45/*ConstFactor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstFactor ::= NUMBER 
            {
              ConstFactor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new NumberConst(N1); RESULT.setLine(N1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(45/*ConstFactor*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SingleConstDecl ::= IDENT Assignop ConstFactor 
            {
              SingleConstDecl RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Assignop A1 = (Assignop)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		ConstFactor C2 = (ConstFactor)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleConstDecl(constName, A1, C2); RESULT.setLine(constNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(35/*SingleConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= SingleConstDecl 
            {
              ConstDecl RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		SingleConstDecl S1 = (SingleConstDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new SingleConst(S1); RESULT.setLine(S1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(13/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDecl ::= ConstDecl COMMA SingleConstDecl 
            {
              ConstDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		SingleConstDecl S2 = (SingleConstDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new MultipleConst(C1, S2); RESULT.setLine(C1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(13/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalVarDecl ::= error SEMI 
            {
              GlobalVarDecl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 parser.report_error("Neispravna deklaracija globalne promenljive, izvrsen oporavak do ; u liniji "+lleft, null);  RESULT=new GlobalVarErrorStmt(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(24/*GlobalVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalVarDecl ::= Type VarDecl SEMI 
            {
              GlobalVarDecl RESULT = null;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Type vType = (Type)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new GlobalVar(vType, V1); RESULT.setLine(vTypeleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(24/*GlobalVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalVarDecl ::= CONST Type ConstDecl SEMI 
            {
              GlobalVarDecl RESULT = null;
		int cTypeleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).left;
		int cTyperight = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).right;
		Type cType = (Type)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new GlobalConst(cType, C1); RESULT.setLine(cTypeleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(24/*GlobalVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalConstDeclList ::= 
            {
              GlobalConstDeclList RESULT = null;
		 RESULT=new NoGlobalVar(); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(23/*GlobalConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalConstDeclList ::= GlobalConstDeclList GlobalVarDecl 
            {
              GlobalConstDeclList RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		GlobalConstDeclList G1 = (GlobalConstDeclList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		int G2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int G2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		GlobalVarDecl G2 = (GlobalVarDecl)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new GlobalVarList(G1, G2); RESULT.setLine(G1left); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(23/*GlobalConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).value;
		 RESULT=new ProgName(progName); RESULT.setLine(progNameleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(28/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		RESULT = start_val;
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJCompiler$parser.done_parsing();
          return CUP$MJCompiler$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName GlobalConstDeclList LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).right;
		ProgName p = (ProgName)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-4)).value;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).right;
		GlobalConstDeclList G1 = (GlobalConstDeclList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-3)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).right;
		MethodDeclList M2 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-1)).value;
		 RESULT=new Program(p, G1, M2); RESULT.setLine(pleft); 
              CUP$MJCompiler$result = new java_cup.runtime.Symbol(27/*Program*/, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJCompiler$stack.elementAt(CUP$MJCompiler$top-0)).right, RESULT);
            }
          return CUP$MJCompiler$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

